```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(apollo)
knitr::opts_chunk$set(echo = TRUE)
install.packages("appolo")
library(dplyr)
library(tidyr)
library(apollo)
install.packages("appolo")
updateR()
install.packages("installr")
library(installr)
install.packages("stringr")
library("stringr")
install.packages("stringr")
library(installr)
updateR()
knitr::opts_chunk$set(echo = TRUE)
install.packages("appolo")
library(dplyr)
library(tidyr)
library(apollo)
knitr::opts_chunk$set(echo = TRUE)
install.packages("appolo")
library(dplyr)
library(tidyr)
library(appolo)
install.packages("apollo")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(apollo)
library(ggplot2)
data.wide <- read.csv('trial_data_freecharge_coded.csv')
data.wide$ID <- 1:nrow(data.wide)
design <- read.csv('experimental_design_trial.csv')
View(data.wide)
data.wide <- read.csv('trial_data_freecharge_coded.csv')
data.wide$ID <- 1:nrow(data.wide)
design <- read.csv('experimental_design_trial.csv')
data <- data.wide %>% pivot_longer(starts_with('Scenario'),
names_to = c('ScenarioNum'),
names_pattern = 'Scenario(.*)',
values_to = 'Choice')
View(data)
data <- data %>% filter(!is.na(Choice))
colnames(design)[1] <- 'ScenarioNum'
data$ScenarioNum <- as.integer(data$ScenarioNum)
data <- left_join(data,design, by='ScenarioNum')
scenario_counts <- data %>% group_by(ScenarioNum) %>% count(Choice)
as.data.frame(scenario_counts %>% pivot_wider(names_from = 'Choice', values_from = 'n'))
ggplot(data, aes(x=Choice)) + geom_bar() + facet_wrap(~ScenarioNum)
apollo_initialise()
### Initialise code
apollo_initialise()
### Set core controls
apollo_control = list(
modelName  ="Charger_Choice_MNL_linear_price",
modelDescr ="Simple MNL model with linear price",
indivID    ="ID"
)
View(apollo_control)
ABC_avail = rep.int(x = 1, times = nrow(data))
database <- as.data.frame(data)
choiceAnalysis_settings <- list(
alternatives = c(A=1, B=2, C=3),
avail        = list(A=ABC_avail, B=ABC_avail, C=ABC_avail),
choiceVar    = database$Choice,
explanators  = database[,c("Gender")]
)
apollo_choiceAnalysis(choiceAnalysis_settings, apollo_control, database)
ABC_avail = rep.int(x = 1, times = nrow(data))
database <- as.data.frame(data)
choiceAnalysis_settings <- list(
alternatives = c(A=1, B=2, C=3),
avail        = list(A=ABC_avail, B=ABC_avail, C=ABC_avail),
choiceVar    = database$Choice,
explanators  = database[,c("Gender")]
)
apollo_choiceAnalysis(choiceAnalysis_settings, apollo_control, database)
ABC_avail = rep.int(x = 1, times = nrow(data))
database <- as.data.frame(data)
choiceAnalysis_settings <- list(
alternatives = c(A=1, B=2, C=3),
avail        = list(A=ABC_avail, B=ABC_avail, C=ABC_avail),
choiceVar    = database$Choice,
explanators  = database[,c("Gender")]
)
apollo_choiceAnalysis(choiceAnalysis_settings, apollo_control, database)
ABC_avail = rep.int(x = 1, times = nrow(data))
database <- as.data.frame(data)
choiceAnalysis_settings <- list(
alternatives = c(A=1, B=2, C=3),
avail        = list(A=ABC_avail, B=ABC_avail, C=ABC_avail),
choiceVar    = database$Choice,
explanators  = database[,c("Gender")]
)
apollo_choiceAnalysis(choiceAnalysis_settings, apollo_control, database)
apollo_initialise()
### Set core controls
apollo_control = list(
modelName  ="Charger_Choice_MNL_linear_price",
modelDescr ="Simple MNL model with linear price",
indivID    ="ID"
)
ABC_avail = rep.int(x = 1, times = nrow(data))
database <- as.data.frame(data)
choiceAnalysis_settings <- list(
alternatives = c(A=1, B=2, C=3),
avail        = list(A=ABC_avail, B=ABC_avail, C=ABC_avail),
choiceVar    = database$Choice,
explanators  = database[,c("Gender")]
)
View(database)
database$Choice
ABC_avail = rep.int(x = 1, times = nrow(data))
database <- as.data.frame(data)
choiceAnalysis_settings <- list(
alternatives = c(A=1, B=2, C=3),
avail        = list(A=ABC_avail, B=ABC_avail, C=ABC_avail),
choiceVar    = database$Choice,
explanators  = database[,c("Gender")]
)
apollo_choiceAnalysis(choiceAnalysis_settings, apollo_control, database)
apollo_initialise()
### Initialise code
apollo_initialise()
### Set core controls
apollo_control = list(
modelName  ="Charger_Choice_MNL_linear_price",
modelDescr ="Simple MNL model with linear price",
indivID    ="ID"
)
### Initialise code
apollo_initialise()
### Set core controls
apollo_control = list(
modelName  ="Charger_Choice_MNL_linear_price",
modelDescr ="Simple MNL model with linear price",
indivID    ="ID"
)
apollo_initialise()
### Set core controls
apollo_control = list(
modelName  ="Charger_Choice_MNL_linear_price",
modelDescr ="Simple MNL model with linear price",
indivID    ="ID"
)
ABC_avail = rep.int(x = 1, times = nrow(data))
database <- as.data.frame(data)
choiceAnalysis_settings <- list(
alternatives = c(A=1, B=2, C=3),
avail        = list(A=ABC_avail, B=ABC_avail, C=ABC_avail),
choiceVar    = database$Choice,
explanators  = database[,c("Gender")]
)
ABC_avail = rep.int(x = 1, times = nrow(data))
database <- as.data.frame(data)
choiceAnalysis_settings <- list(
alternatives = c(A=1, B=2, C=3),
avail        = list(A=ABC_avail, B=ABC_avail, C=ABC_avail),
choiceVar    = database$Choice,
explanators  = database[,c("Gender")]
)
apollo_choiceAnalysis(choiceAnalysis_settings, apollo_control, database)
View(database)
## Apollo: Analysis of Choice
```{r apollo-choice-analysis}
ABC_avail = rep.int(x = 1, times = nrow(data))
database <- as.data.frame(data)
choiceAnalysis_settings <- list(
alternatives = c(A=1, B=2, C=3),
avail        = list(A=ABC_avail, B=ABC_avail, C=ABC_avail),
choiceVar    = database$Choice,
explanators  = database[,c("Gender")]
)
ABC_avail = rep.int(x = 1, times = nrow(data))
database <- as.data.frame(data)
choiceAnalysis_settings <- list(
alternatives = c(A=1, B=2, C=3),
avail        = list(A=ABC_avail, B=ABC_avail, C=ABC_avail),
choiceVar    = database$Choice,
explanators  = database[,c("Gender")]
)
apollo_choiceAnalysis(choiceAnalysis_settings, apollo_control, database)
ABC_avail = rep.int(x = 1, times = nrow(data))
database <- as.data.frame(data)
choiceAnalysis_settings <- list(
alternatives = c(A=1, B=2, C=3),
avail        = list(A=ABC_avail, B=ABC_avail, C=ABC_avail),
choiceVar    = database$Choice,
explanators  = database[,c("Gender")]
)
apollo_choiceAnalysis(choiceAnalysis_settings, apollo_control, database)
### Vector of parameters, including any that are kept fixed in estimation
apollo_beta=c(asc_A   = 0,
asc_B   = 0,
asc_C   = 0,
beta_price = 0,
beta_free = 0,
beta_chargetime = 0,
beta_detourtime = 0,
beta_restaurant = 0,
beta_convstore = 0,
beta_mall = 0)
### Vector with names (in quotes) of parameters to be kept fixed at their starting value in apollo_beta, use apollo_beta_fixed = c() if none
apollo_fixed = c("asc_A")
apollo_inputs = apollo_validateInputs()
apollo_fixed = c("asc_A")
### Vector of parameters, including any that are kept fixed in estimation
apollo_beta=c(asc_A   = 0,
asc_B   = 0,
asc_C   = 0,
beta_price = 0,
beta_free = 0,
beta_chargetime = 0,
beta_detourtime = 0,
beta_restaurant = 0,
beta_convstore = 0,
beta_mall = 0)
### Vector with names (in quotes) of parameters to be kept fixed at their starting value in apollo_beta, use apollo_beta_fixed = c() if none
apollo_fixed = c("asc_A")
apollo_inputs = apollo_validateInputs()
apollo_probabilities=function(apollo_beta, apollo_inputs, functionality="estimate"){
### Attach inputs and detach after function exit
apollo_attach(apollo_beta, apollo_inputs)
on.exit(apollo_detach(apollo_beta, apollo_inputs))
### Create list of probabilities P
P = list()
### List of utilities: these must use the same names as in mnl_settings, order is irrelevant
V = list()
V[['A']]  = asc_A + beta_price * alt1.price +
beta_free * (alt1.price == 0) +
beta_chargetime * alt1.charge_time +
beta_detourtime * alt1.detour_time +
beta_convstore * (alt1.amenities == -1) +
beta_restaurant * (alt1.amenities == 1) +
beta_mall * (alt1.amenities == 3)
V[['B']]  = asc_B + beta_price * alt2.price +
beta_free * (alt2.price == 0) +
beta_chargetime * alt2.charge_time +
beta_detourtime * alt2.detour_time +
beta_convstore * (alt2.amenities == -1) +
beta_restaurant * (alt2.amenities == 1) +
beta_mall * (alt2.amenities == 3)
V[['C']]  = asc_C + beta_price * alt3.price +
beta_free * (alt3.price == 0) +
beta_chargetime * alt3.charge_time +
beta_detourtime * alt3.detour_time +
beta_convstore * (alt3.amenities == -1) +
beta_restaurant * (alt3.amenities == 1) +
beta_mall * (alt3.amenities == 3)
### Define settings for MNL model component
mnl_settings = list(
alternatives  = c(A=1, B=2, C=3),
avail         = list(A=ABC_avail, B=ABC_avail, C=ABC_avail),
choiceVar     = Choice,
V             = V
)
### Compute probabilities using MNL model
P[['model']] = apollo_mnl(mnl_settings, functionality)
### Take product across observation for same individual
P = apollo_panelProd(P, apollo_inputs, functionality)
### Prepare and return outputs of function
P = apollo_prepareProb(P, apollo_inputs, functionality)
return(P)
}
apollo_probabilities=function(apollo_beta, apollo_inputs, functionality="estimate"){
### Attach inputs and detach after function exit
apollo_attach(apollo_beta, apollo_inputs)
on.exit(apollo_detach(apollo_beta, apollo_inputs))
### Create list of probabilities P
P = list()
### List of utilities: these must use the same names as in mnl_settings, order is irrelevant
V = list()
V[['A']]  = asc_A + beta_price * alt1.price +
beta_free * (alt1.price == 0) +
beta_chargetime * alt1.charge_time +
beta_detourtime * alt1.detour_time +
beta_convstore * (alt1.amenities == -1) +
beta_restaurant * (alt1.amenities == 1) +
beta_mall * (alt1.amenities == 3)
V[['B']]  = asc_B + beta_price * alt2.price +
beta_free * (alt2.price == 0) +
beta_chargetime * alt2.charge_time +
beta_detourtime * alt2.detour_time +
beta_convstore * (alt2.amenities == -1) +
beta_restaurant * (alt2.amenities == 1) +
beta_mall * (alt2.amenities == 3)
V[['C']]  = asc_C + beta_price * alt3.price +
beta_free * (alt3.price == 0) +
beta_chargetime * alt3.charge_time +
beta_detourtime * alt3.detour_time +
beta_convstore * (alt3.amenities == -1) +
beta_restaurant * (alt3.amenities == 1) +
beta_mall * (alt3.amenities == 3)
### Define settings for MNL model component
mnl_settings = list(
alternatives  = c(A=1, B=2, C=3),
avail         = list(A=ABC_avail, B=ABC_avail, C=ABC_avail),
choiceVar     = Choice,
V             = V
)
### Compute probabilities using MNL model
P[['model']] = apollo_mnl(mnl_settings, functionality)
### Take product across observation for same individual
P = apollo_panelProd(P, apollo_inputs, functionality)
### Prepare and return outputs of function
P = apollo_prepareProb(P, apollo_inputs, functionality)
return(P)
}
p
P
View(apollo_probabilities)
model = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs)
apollo_modelOutput(model)
apollo_probabilities=function(apollo_beta, apollo_inputs, functionality="estimate"){
### Attach inputs and detach after function exit
apollo_attach(apollo_beta, apollo_inputs)
on.exit(apollo_detach(apollo_beta, apollo_inputs))
### Create list of probabilities P
P = list()
### List of utilities: these must use the same names as in mnl_settings, order is irrelevant
V = list()
V[['A']]  = asc_A + beta_price * alt1.price +
beta_free * (alt1.price == 0) +
beta_chargetime * alt1.charge_time +
beta_detourtime * alt1.detour_time +
beta_convstore * (alt1.amenities == -1) +
beta_interactionalt1+((alt1.price == 0)*(alt1.amenities == -1))+
beta_restaurant * (alt1.amenities == 1) +beta_interactionalt2+((alt1.price == 0) * (alt1.amenities == 1))+
beta_mall * (alt1.amenities == 3)+beta_interactionalt3+((alt1.price == 0) * (alt1.amenities == 3))
V[['B']]  = asc_B + beta_price * alt2.price +
beta_free * (alt2.price == 0) +
beta_chargetime * alt2.charge_time +
beta_detourtime * alt2.detour_time +
beta_convstore * (alt2.amenities == -1) + beta_interactionalt1+((alt2.price == 0)*(alt2.amenities == -1))+
beta_restaurant * (alt2.amenities == 1) + beta_interactionalt2+((alt2.price == 0) * (alt2.amenities == 1))+
beta_mall * (alt2.amenities == 3)+beta_interactionalt3+((alt2.price == 0) * (alt2.amenities == 3))
V[['C']]  = asc_C + beta_price * alt3.price +
beta_free * (alt3.price == 0) +
beta_chargetime * alt3.charge_time +
beta_detourtime * alt3.detour_time +
beta_convstore * (alt3.amenities == -1) + beta_interactionalt1+((alt3.price == 0)*(alt3.amenities == -1))+
beta_restaurant * (alt3.amenities == 1) + beta_interactionalt2+((alt3.price == 0) * (alt3.amenities == 1))+
beta_mall * (alt3.amenities == 3)+beta_interactionalt3+((alt3.price == 0) * (alt3.amenities == 3))
### Define settings for MNL model component
mnl_settings = list(
alternatives  = c(A=1, B=2, C=3),
avail         = list(A=ABC_avail, B=ABC_avail, C=ABC_avail),
choiceVar     = Choice,
V             = V
)
### Compute probabilities using MNL model
P[['model']] = apollo_mnl(mnl_settings, functionality)
### Take product across observation for same individual
P = apollo_panelProd(P, apollo_inputs, functionality)
### Prepare and return outputs of function
P = apollo_prepareProb(P, apollo_inputs, functionality)
return(P)
}
model = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs)
apollo_beta=c(asc_A   = 0,
asc_B   = 0,
asc_C   = 0,
beta_price = 0,
beta_free = 0,
beta_chargetime = 0,
beta_detourtime = 0,
beta_restaurant = 0,
beta_convstore = 0,
beta_mall = 0,
beta_interactionalt1=0,
beta_interactionalt2=0,
beta_interactionalt3=0)
### Vector with names (in quotes) of parameters to be kept fixed at their starting value in apollo_beta, use apollo_beta_fixed = c() if none
apollo_fixed = c("asc_A")
apollo_inputs = apollo_validateInputs()
apollo_probabilities=function(apollo_beta, apollo_inputs, functionality="estimate"){
### Attach inputs and detach after function exit
apollo_attach(apollo_beta, apollo_inputs)
on.exit(apollo_detach(apollo_beta, apollo_inputs))
### Create list of probabilities P
P = list()
### List of utilities: these must use the same names as in mnl_settings, order is irrelevant
V = list()
V[['A']]  = asc_A + beta_price * alt1.price +
beta_free * (alt1.price == 0) +
beta_chargetime * alt1.charge_time +
beta_detourtime * alt1.detour_time +
beta_convstore * (alt1.amenities == -1) +
beta_interactionalt1+((alt1.price == 0)*(alt1.amenities == -1))+
beta_restaurant * (alt1.amenities == 1) +beta_interactionalt2+((alt1.price == 0) * (alt1.amenities == 1))+
beta_mall * (alt1.amenities == 3)+beta_interactionalt3+((alt1.price == 0) * (alt1.amenities == 3))
V[['B']]  = asc_B + beta_price * alt2.price +
beta_free * (alt2.price == 0) +
beta_chargetime * alt2.charge_time +
beta_detourtime * alt2.detour_time +
beta_convstore * (alt2.amenities == -1) + beta_interactionalt1+((alt2.price == 0)*(alt2.amenities == -1))+
beta_restaurant * (alt2.amenities == 1) + beta_interactionalt2+((alt2.price == 0) * (alt2.amenities == 1))+
beta_mall * (alt2.amenities == 3)+beta_interactionalt3+((alt2.price == 0) * (alt2.amenities == 3))
V[['C']]  = asc_C + beta_price * alt3.price +
beta_free * (alt3.price == 0) +
beta_chargetime * alt3.charge_time +
beta_detourtime * alt3.detour_time +
beta_convstore * (alt3.amenities == -1) + beta_interactionalt1+((alt3.price == 0)*(alt3.amenities == -1))+
beta_restaurant * (alt3.amenities == 1) + beta_interactionalt2+((alt3.price == 0) * (alt3.amenities == 1))+
beta_mall * (alt3.amenities == 3)+beta_interactionalt3+((alt3.price == 0) * (alt3.amenities == 3))
### Define settings for MNL model component
mnl_settings = list(
alternatives  = c(A=1, B=2, C=3),
avail         = list(A=ABC_avail, B=ABC_avail, C=ABC_avail),
choiceVar     = Choice,
V             = V
)
### Compute probabilities using MNL model
P[['model']] = apollo_mnl(mnl_settings, functionality)
### Take product across observation for same individual
P = apollo_panelProd(P, apollo_inputs, functionality)
### Prepare and return outputs of function
P = apollo_prepareProb(P, apollo_inputs, functionality)
return(P)
}
model = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs)
apollo_probabilities=function(apollo_beta, apollo_inputs, functionality="estimate"){
### Attach inputs and detach after function exit
apollo_attach(apollo_beta, apollo_inputs)
on.exit(apollo_detach(apollo_beta, apollo_inputs))
### Create list of probabilities P
P = list()
### List of utilities: these must use the same names as in mnl_settings, order is irrelevant
V = list()
V[['A']]  = asc_A + beta_price * alt1.price +
beta_free * (alt1.price == 0) +
beta_chargetime * alt1.charge_time +
beta_detourtime * alt1.detour_time +
beta_convstore * (alt1.amenities == -1) +
beta_interactionalt1*((alt1.price == 0)*(alt1.amenities == -1))+
beta_restaurant * (alt1.amenities == 1) +beta_interactionalt2*((alt1.price == 0) * (alt1.amenities == 1))+
beta_mall * (alt1.amenities == 3)+beta_interactionalt3*((alt1.price == 0) * (alt1.amenities == 3))
V[['B']]  = asc_B + beta_price * alt2.price +
beta_free * (alt2.price == 0) +
beta_chargetime * alt2.charge_time +
beta_detourtime * alt2.detour_time +
beta_convstore * (alt2.amenities == -1) + beta_interactionalt1*((alt2.price == 0)*(alt2.amenities == -1))+
beta_restaurant * (alt2.amenities == 1) + beta_interactionalt2*((alt2.price == 0) * (alt2.amenities == 1))+
beta_mall * (alt2.amenities == 3)+beta_interactionalt3*((alt2.price == 0) * (alt2.amenities == 3))
V[['C']]  = asc_C + beta_price * alt3.price +
beta_free * (alt3.price == 0) +
beta_chargetime * alt3.charge_time +
beta_detourtime * alt3.detour_time +
beta_convstore * (alt3.amenities == -1) + beta_interactionalt1*((alt3.price == 0)*(alt3.amenities == -1))+
beta_restaurant * (alt3.amenities == 1) + beta_interactionalt2*((alt3.price == 0) * (alt3.amenities == 1))+
beta_mall * (alt3.amenities == 3)+beta_interactionalt3*((alt3.price == 0) * (alt3.amenities == 3))
### Define settings for MNL model component
mnl_settings = list(
alternatives  = c(A=1, B=2, C=3),
avail         = list(A=ABC_avail, B=ABC_avail, C=ABC_avail),
choiceVar     = Choice,
V             = V
)
### Compute probabilities using MNL model
P[['model']] = apollo_mnl(mnl_settings, functionality)
### Take product across observation for same individual
P = apollo_panelProd(P, apollo_inputs, functionality)
### Prepare and return outputs of function
P = apollo_prepareProb(P, apollo_inputs, functionality)
return(P)
}
model = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs)
apollo_modelOutput(model)
View(data)
