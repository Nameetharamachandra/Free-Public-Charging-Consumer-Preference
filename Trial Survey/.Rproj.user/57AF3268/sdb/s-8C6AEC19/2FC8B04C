{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Free Charging Trial Survey\"\nauthor: \"Michael Maness\"\ndate: \"November 18, 2019\"\noutput:\n  html_document: default\n  pdf_document: default\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(apollo)\nlibrary(ggplot2)\n```\n\n## Load Dataset\n\n\n```{r load-data}\ndata.wide <- read.csv('trial_data_freecharge_coded.csv')\ndata.wide$ID <- 1:nrow(data.wide)\ndesign <- read.csv('experimental_design_trial.csv')\n```\n\n## Table Manipulation\n\nLet me changed the data into a long format based on scenario\n\n```{r data-long}\ndata <- data.wide %>% pivot_longer(starts_with('Scenario'),\n                      names_to = c('ScenarioNum'),\n                      names_pattern = 'Scenario(.*)',\n                      values_to = 'Choice')\n```\n\nNow I want to get rid of the rows from the unseen scenarios.\n\n```{r data-elim-scenarios}\ndata <- data %>% filter(!is.na(Choice))\n```\n\nLets combine the scenario design data with the choice data:\n\n```{r combine-data-design}\ncolnames(design)[1] <- 'ScenarioNum'\ndata$ScenarioNum <- as.integer(data$ScenarioNum)\ndata <- left_join(data,design, by='ScenarioNum')\n```\n\n\n## Descriptive Statistics\n\nLets get some stats on scenario choice\n\n```{r stats-01}\nscenario_counts <- data %>% group_by(ScenarioNum) %>% count(Choice)\nas.data.frame(scenario_counts %>% pivot_wider(names_from = 'Choice', values_from = 'n'))\n\nggplot(data, aes(x=Choice)) + geom_bar() + facet_wrap(~ScenarioNum)\n\n\n```\n\n\n## Apollo Setup\n\n```{r apollo-setup}\n### Initialise code\napollo_initialise()\n\n### Set core controls\napollo_control = list(\n  modelName  =\"Charger_Choice_MNL_linear_price\",\n  modelDescr =\"Simple MNL model with linear price\",\n  indivID    =\"ID\"\n)\n```\n\n## Apollo: Analysis of Choice\n\n```{r apollo-choice-analysis}\nABC_avail = rep.int(x = 1, times = nrow(data))\ndatabase <- as.data.frame(data)\n\nchoiceAnalysis_settings <- list(\n  alternatives = c(A=1, B=2, C=3),\n  avail        = list(A=ABC_avail, B=ABC_avail, C=ABC_avail),\n  choiceVar    = database$Choice,\n  explanators  = database[,c(\"Gender\")]\n)\n\napollo_choiceAnalysis(choiceAnalysis_settings, apollo_control, database)\n```\n\n## Apollo: Define Model Parameters\n\n```{r model-params}\n### Vector of parameters, including any that are kept fixed in estimation\napollo_beta=c(asc_A   = 0,\n              asc_B   = 0,\n              asc_C   = 0,\n              beta_price = 0,\n              beta_free = 0,\n              beta_chargetime = 0,\n              beta_detourtime = 0,\n              beta_restaurant = 0,\n              beta_convstore = 0,\n              beta_mall = 0)\n\n### Vector with names (in quotes) of parameters to be kept fixed at their starting value in apollo_beta, use apollo_beta_fixed = c() if none\napollo_fixed = c(\"asc_A\")\n\napollo_inputs = apollo_validateInputs()\n```\n\n## Apollo: Likelihood Function and Model Definition\n\n```{r apollo-likelihood}\napollo_probabilities=function(apollo_beta, apollo_inputs, functionality=\"estimate\"){\n\n  ### Attach inputs and detach after function exit\n  apollo_attach(apollo_beta, apollo_inputs)\n  on.exit(apollo_detach(apollo_beta, apollo_inputs))\n\n  ### Create list of probabilities P\n  P = list()\n  \n  ### List of utilities: these must use the same names as in mnl_settings, order is irrelevant\n  V = list()\n  V[['A']]  = asc_A + beta_price * alt1.price + \n                      beta_free * (alt1.price == 0) +\n                      beta_chargetime * alt1.charge_time + \n                      beta_detourtime * alt1.detour_time +\n                      beta_convstore * (alt1.amenities == -1) + \n                      beta_restaurant * (alt1.amenities == 1) + \n                      beta_mall * (alt1.amenities == 3)\n  V[['B']]  = asc_B + beta_price * alt2.price + \n                      beta_free * (alt2.price == 0) +\n                      beta_chargetime * alt2.charge_time + \n                      beta_detourtime * alt2.detour_time +\n                      beta_convstore * (alt2.amenities == -1) + \n                      beta_restaurant * (alt2.amenities == 1) + \n                      beta_mall * (alt2.amenities == 3)\n  V[['C']]  = asc_C + beta_price * alt3.price + \n                      beta_free * (alt3.price == 0) +\n                      beta_chargetime * alt3.charge_time + \n                      beta_detourtime * alt3.detour_time +\n                      beta_convstore * (alt3.amenities == -1) + \n                      beta_restaurant * (alt3.amenities == 1) + \n                      beta_mall * (alt3.amenities == 3)\n  \n  ### Define settings for MNL model component\n  mnl_settings = list(\n    alternatives  = c(A=1, B=2, C=3), \n    avail         = list(A=ABC_avail, B=ABC_avail, C=ABC_avail), \n    choiceVar     = Choice,\n    V             = V\n  )\n  \n  ### Compute probabilities using MNL model\n  P[['model']] = apollo_mnl(mnl_settings, functionality)\n\n  ### Take product across observation for same individual\n  P = apollo_panelProd(P, apollo_inputs, functionality)\n\n  ### Prepare and return outputs of function\n  P = apollo_prepareProb(P, apollo_inputs, functionality)\n  return(P)\n}\n```\n\n## Apollo: Model Estimation and Output\n\n```{r apollo-model-estimation}\nmodel = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs)\n\napollo_modelOutput(model)\n```\n\n## Second estimation with quadratic price\n\nNow I want to try the estimation again with a quadratic price relationship instead\n\n```{r quadratic-price-estimation}\n### Initialise code\napollo_initialise()\n\n### Set core controls\napollo_control = list(\n  modelName  =\"Charger_Choice_MNL_quadratic_price\",\n  modelDescr =\"Simple MNL model with linear price\",\n  indivID    =\"ID\"\n)\n\nABC_avail = rep.int(x = 1, times = nrow(data))\ndatabase <- as.data.frame(data)\n\nchoiceAnalysis_settings <- list(\n  alternatives = c(A=1, B=2, C=3),\n  avail        = list(A=ABC_avail, B=ABC_avail, C=ABC_avail),\n  choiceVar    = database$Choice,\n  explanators  = database[,c(\"Gender\")]\n)\n\napollo_choiceAnalysis(choiceAnalysis_settings, apollo_control, database)\n\n### Vector of parameters, including any that are kept fixed in estimation\napollo_beta=c(asc_A   = 0,\n              asc_B   = 0,\n              asc_C   = 0,\n              beta_price = 0,\n              beta_price_squared = 0,\n              beta_free = 0,\n              beta_chargetime = 0,\n              beta_detourtime = 0,\n              beta_restaurant = 0,\n              beta_convstore = 0,\n              beta_mall = 0)\n\n### Vector with names (in quotes) of parameters to be kept fixed at their starting value in apollo_beta, use apollo_beta_fixed = c() if none\napollo_fixed = c(\"asc_A\")\n\napollo_inputs = apollo_validateInputs()\n\napollo_probabilities=function(apollo_beta, apollo_inputs, functionality=\"estimate\"){\n\n  ### Attach inputs and detach after function exit\n  apollo_attach(apollo_beta, apollo_inputs)\n  on.exit(apollo_detach(apollo_beta, apollo_inputs))\n\n  ### Create list of probabilities P\n  P = list()\n  \n  ### List of utilities: these must use the same names as in mnl_settings, order is irrelevant\n  V = list()\n  V[['A']]  = asc_A + beta_price * alt1.price + \n                      beta_price_squared * alt1.price^2 +\n                      beta_free * (alt1.price == 0) +\n                      beta_chargetime * alt1.charge_time + \n                      beta_detourtime * alt1.detour_time +\n                      beta_convstore * (alt1.amenities == -1) + \n                      beta_restaurant * (alt1.amenities == 1) + \n                      beta_mall * (alt1.amenities == 3)\n  V[['B']]  = asc_B + beta_price * alt2.price + \n                      beta_price_squared * alt2.price^2 +\n                      beta_free * (alt2.price == 0) +\n                      beta_chargetime * alt2.charge_time + \n                      beta_detourtime * alt2.detour_time +\n                      beta_convstore * (alt2.amenities == -1) + \n                      beta_restaurant * (alt2.amenities == 1) + \n                      beta_mall * (alt2.amenities == 3)\n  V[['C']]  = asc_C + beta_price * alt3.price + \n                      beta_price_squared * alt3.price^2 +\n                      beta_free * (alt3.price == 0) +\n                      beta_chargetime * alt3.charge_time + \n                      beta_detourtime * alt3.detour_time +\n                      beta_convstore * (alt3.amenities == -1) + \n                      beta_restaurant * (alt3.amenities == 1) + \n                      beta_mall * (alt3.amenities == 3)\n  \n  ### Define settings for MNL model component\n  mnl_settings = list(\n    alternatives  = c(A=1, B=2, C=3), \n    avail         = list(A=ABC_avail, B=ABC_avail, C=ABC_avail), \n    choiceVar     = Choice,\n    V             = V\n  )\n  \n  ### Compute probabilities using MNL model\n  P[['model']] = apollo_mnl(mnl_settings, functionality)\n\n  ### Take product across observation for same individual\n  P = apollo_panelProd(P, apollo_inputs, functionality)\n\n  ### Prepare and return outputs of function\n  P = apollo_prepareProb(P, apollo_inputs, functionality)\n  return(P)\n}\n\nmodel2 = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs)\n\napollo_modelOutput(model2)\n```\n\n\n## Third estimation with quadratic price and no ASCs\n\n```{r estimation-quadratic-noASC}\n### Initialise code\napollo_initialise()\n\n### Set core controls\napollo_control = list(\n  modelName  =\"Charger_Choice_MNL_quadratic_price_noASC\",\n  modelDescr =\"Simple MNL model with linear price\",\n  indivID    =\"ID\"\n)\n\nABC_avail = rep.int(x = 1, times = nrow(data))\ndatabase <- as.data.frame(data)\n\nchoiceAnalysis_settings <- list(\n  alternatives = c(A=1, B=2, C=3),\n  avail        = list(A=ABC_avail, B=ABC_avail, C=ABC_avail),\n  choiceVar    = database$Choice,\n  explanators  = database[,c(\"Gender\")]\n)\n\napollo_choiceAnalysis(choiceAnalysis_settings, apollo_control, database)\n\n### Vector of parameters, including any that are kept fixed in estimation\napollo_beta=c(asc_A   = 0,\n              asc_B   = 0,\n              asc_C   = 0,\n              beta_price = 0,\n              beta_price_squared = 0,\n              beta_free = 0,\n              beta_chargetime = 0,\n              beta_detourtime = 0,\n              beta_restaurant = 0,\n              beta_convstore = 0,\n              beta_mall = 0)\n\n### Vector with names (in quotes) of parameters to be kept fixed at their starting value in apollo_beta, use apollo_beta_fixed = c() if none\napollo_fixed = c(\"asc_A\", \"asc_B\", \"asc_C\")\n\napollo_inputs = apollo_validateInputs()\n\napollo_probabilities=function(apollo_beta, apollo_inputs, functionality=\"estimate\"){\n\n  ### Attach inputs and detach after function exit\n  apollo_attach(apollo_beta, apollo_inputs)\n  on.exit(apollo_detach(apollo_beta, apollo_inputs))\n\n  ### Create list of probabilities P\n  P = list()\n  \n  ### List of utilities: these must use the same names as in mnl_settings, order is irrelevant\n  V = list()\n  V[['A']]  = asc_A + beta_price * alt1.price + \n                      beta_price_squared * alt1.price^2 +\n                      beta_free * (alt1.price == 0) +\n                      beta_chargetime * alt1.charge_time + \n                      beta_detourtime * alt1.detour_time +\n                      beta_convstore * (alt1.amenities == -1) + \n                      beta_restaurant * (alt1.amenities == 1) + \n                      beta_mall * (alt1.amenities == 3)\n  V[['B']]  = asc_B + beta_price * alt2.price + \n                      beta_price_squared * alt2.price^2 +\n                      beta_free * (alt2.price == 0) +\n                      beta_chargetime * alt2.charge_time + \n                      beta_detourtime * alt2.detour_time +\n                      beta_convstore * (alt2.amenities == -1) + \n                      beta_restaurant * (alt2.amenities == 1) + \n                      beta_mall * (alt2.amenities == 3)\n  V[['C']]  = asc_C + beta_price * alt3.price + \n                      beta_price_squared * alt3.price^2 +\n                      beta_free * (alt3.price == 0) +\n                      beta_chargetime * alt3.charge_time + \n                      beta_detourtime * alt3.detour_time +\n                      beta_convstore * (alt3.amenities == -1) + \n                      beta_restaurant * (alt3.amenities == 1) + \n                      beta_mall * (alt3.amenities == 3)\n  \n  ### Define settings for MNL model component\n  mnl_settings = list(\n    alternatives  = c(A=1, B=2, C=3), \n    avail         = list(A=ABC_avail, B=ABC_avail, C=ABC_avail), \n    choiceVar     = Choice,\n    V             = V\n  )\n  \n  ### Compute probabilities using MNL model\n  P[['model']] = apollo_mnl(mnl_settings, functionality)\n\n  ### Take product across observation for same individual\n  P = apollo_panelProd(P, apollo_inputs, functionality)\n\n  ### Prepare and return outputs of function\n  P = apollo_prepareProb(P, apollo_inputs, functionality)\n  return(P)\n}\n\nmodel3 = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs)\n\napollo_modelOutput(model3)\n```\n\n## Fourth estimation with Linear Price and No ASC\n\n```{r estimation-linear-noASC}\n### Initialise code\napollo_initialise()\n\n### Set core controls\napollo_control = list(\n  modelName  =\"Charger_Choice_MNL_linear_price_noASC\",\n  modelDescr =\"Simple MNL model with linear price\",\n  indivID    =\"ID\"\n)\n\nABC_avail = rep.int(x = 1, times = nrow(data))\ndatabase <- as.data.frame(data)\n\nchoiceAnalysis_settings <- list(\n  alternatives = c(A=1, B=2, C=3),\n  avail        = list(A=ABC_avail, B=ABC_avail, C=ABC_avail),\n  choiceVar    = database$Choice,\n  explanators  = database[,c(\"Gender\")]\n)\n\napollo_choiceAnalysis(choiceAnalysis_settings, apollo_control, database)\n\n### Vector of parameters, including any that are kept fixed in estimation\napollo_beta=c(asc_A   = 0,\n              asc_B   = 0,\n              asc_C   = 0,\n              beta_price = 0,\n              beta_free = 0,\n              beta_chargetime = 0,\n              beta_detourtime = 0,\n              beta_restaurant = 0,\n              beta_convstore = 0,\n              beta_mall = 0)\n\n### Vector with names (in quotes) of parameters to be kept fixed at their starting value in apollo_beta, use apollo_beta_fixed = c() if none\napollo_fixed = c(\"asc_A\", \"asc_B\", \"asc_C\")\n\napollo_inputs = apollo_validateInputs()\n\napollo_probabilities=function(apollo_beta, apollo_inputs, functionality=\"estimate\"){\n\n  ### Attach inputs and detach after function exit\n  apollo_attach(apollo_beta, apollo_inputs)\n  on.exit(apollo_detach(apollo_beta, apollo_inputs))\n\n  ### Create list of probabilities P\n  P = list()\n  \n  ### List of utilities: these must use the same names as in mnl_settings, order is irrelevant\n  V = list()\n  V[['A']]  = asc_A + beta_price * alt1.price + \n                      beta_free * (alt1.price == 0) +\n                      beta_chargetime * alt1.charge_time + \n                      beta_detourtime * alt1.detour_time +\n                      beta_convstore * (alt1.amenities == -1) + \n                      beta_restaurant * (alt1.amenities == 1) + \n                      beta_mall * (alt1.amenities == 3)\n  V[['B']]  = asc_B + beta_price * alt2.price + \n                      beta_free * (alt2.price == 0) +\n                      beta_chargetime * alt2.charge_time + \n                      beta_detourtime * alt2.detour_time +\n                      beta_convstore * (alt2.amenities == -1) + \n                      beta_restaurant * (alt2.amenities == 1) + \n                      beta_mall * (alt2.amenities == 3)\n  V[['C']]  = asc_C + beta_price * alt3.price + \n                      beta_free * (alt3.price == 0) +\n                      beta_chargetime * alt3.charge_time + \n                      beta_detourtime * alt3.detour_time +\n                      beta_convstore * (alt3.amenities == -1) + \n                      beta_restaurant * (alt3.amenities == 1) + \n                      beta_mall * (alt3.amenities == 3)\n  \n  ### Define settings for MNL model component\n  mnl_settings = list(\n    alternatives  = c(A=1, B=2, C=3), \n    avail         = list(A=ABC_avail, B=ABC_avail, C=ABC_avail), \n    choiceVar     = Choice,\n    V             = V\n  )\n  \n  ### Compute probabilities using MNL model\n  P[['model']] = apollo_mnl(mnl_settings, functionality)\n\n  ### Take product across observation for same individual\n  P = apollo_panelProd(P, apollo_inputs, functionality)\n\n  ### Prepare and return outputs of function\n  P = apollo_prepareProb(P, apollo_inputs, functionality)\n  return(P)\n}\n\nmodel4 = apollo_estimate(apollo_beta, apollo_fixed, apollo_probabilities, apollo_inputs)\n\napollo_modelOutput(model4)\n```\n\n",
    "created" : 1574437528401.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4125865330",
    "id" : "2FC8B04C",
    "lastKnownWriteTime" : 1574437960,
    "last_content_update" : 1574437960571,
    "path" : "C:/Users/manessm/Dropbox/Research/Behavioral Economics and Transportation/Zero Price Effect Distribution Study/Trial Survey/charger_choice_trial_MM_11-18.Rmd",
    "project_path" : "charger_choice_trial_MM_11-18.Rmd",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}